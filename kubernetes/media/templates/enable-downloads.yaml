apiVersion: v1
kind: ServiceAccount
metadata:
  name: enable-downloads
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: enable-downloads
rules:
- apiGroups: ["apps"] # "" indicates the core API group
  resources: ["deployments"]
  verbs: ["patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: enable-downloads
subjects:
- kind: ServiceAccount
  name: enable-downloads
roleRef:
  kind: Role
  name: enable-downloads
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: enable-downloads
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      completions: 1
      backoffLimit: 1
      template:
        spec:
          serviceAccountName: enable-downloads
          restartPolicy: Never
          containers:
          - name: enable-downloads
            image: nixery.dev/shell/curl/gnugrep/jq
            command:
            - /bin/bash
            - -c
            - |-
              set -e

              APISERVER=https://kubernetes.default.svc
              SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
              NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
              TOKEN=$(cat ${SERVICEACCOUNT}/token)
              CACERT=${SERVICEACCOUNT}/ca.crt

              STATUSES=$(curl --no-progress-meter -m 5 http://192.168.142.1:6926/interfaces || true)
              echo "$STATUSES"

              # Interface status:
              #  interface wan is online 18h:41m:16s, uptime 19h:36m:50s and tracking is active
              #  interface wan_lte is online 18h:41m:16s, uptime 120h:47m:35s and tracking is active

              WANONLINE=$(echo "$STATUSES" | grep "interface wan is online" | wc -l)
              if [ "${WANONLINE}" == "1" ]; then
                echo "WAN is up." >&2
                REPLICAS=1
              else
                echo "WAN is not up." >&2
                REPLICAS=0
              fi

              echo Setting replicas to $REPLICAS

              curl ${APISERVER}/apis/apps/v1/namespaces/${NAMESPACE}/deployments/transmission \
                -X PATCH --fail-with-body --no-progress-meter -m 5 \
                --cacert ${CACERT} \
                --header "Authorization: Bearer ${TOKEN}" \
                --header "Content-Type: application/strategic-merge-patch+json" \
                --data "{ \
                  \"apiVersion\": \"apps/v1\", \
                  \"kind\": \"Deployment\", \
                  \"metadata\": { \"name\": \"transmission\" }, \
                  \"spec\": { \"replicas\": ${REPLICAS} } \
                }" | jq ".status"