apiVersion: apps/v1
kind: Deployment
metadata:
  name: nzbget
spec:
  revisionHistoryLimit: 1
  # do not specify replicas because cronjobs/enable-downloads changes this value
  # if this value is set then argocd will want to set it back after it drifts
  # replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: nzbget
  template:
    metadata:
      labels:
        app: nzbget
    spec:
      nodeSelector:
        gluster-volume-mounted: "true"
      volumes:
      - name: nzbget-config
        hostPath:
          path: /data/nzbget
      - name: downloads
        hostPath:
          path: /data/media/downloads/nzbget
      initContainers:
      - name: create-dirs
        image: busybox:1.37.0
        volumeMounts:
        - name: downloads
          mountPath: /downloads
        command: ["/bin/sh", "-c"]
        args:
          - |-
            mkdir -p /downloads/complete/radarr
            mkdir -p /downloads/complete/sonarr
            chown -R 1000:1000 /downloads/*
      containers:
      - name: nzbget
        image: lscr.io/linuxserver/nzbget:v25.2-ls204
        env:
        - name: TZ
          value: Europe/Amsterdam
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        volumeMounts:
        - name: nzbget-config
          mountPath: /config
        - name: downloads
          mountPath: /downloads
        ports:
        - name: http
          containerPort: 6789
        # TODO: check resource usage when under heavy load
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
          limits:
            cpu: "2000m"
            memory: "1000Mi"
        startupProbe:
          httpGet:
            path: /
            port: http
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /
            port: http
        livenessProbe:
          httpGet:
            path: /
            port: http
---
apiVersion: v1
kind: Service
metadata:
  name: nzbget
spec:
  selector:
    app: nzbget
  ports:
  - protocol: TCP
    port: 80
    targetPort: 6789
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nzbget
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.auth.svc.cluster.local/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.home.cambridge.me/oauth2/start"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - "nzbget.home.cambridge.me"
    secretName: nzbget-home-cambridge-me-tls
  ingressClassName: nginx
  rules:
  - host: nzbget.home.cambridge.me
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nzbget
            port:
              number: 80