apiVersion: apps/v1
kind: Deployment
metadata:
  name: transmission
spec:
  revisionHistoryLimit: 1
  # do not specify replicas because cronjobs/enable-downloads changes this value
  # if this value is set then argocd will want to set it back after it drifts
  # replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: transmission
  template:
    metadata:
      labels:
        app: transmission
    spec:
      volumes:
      - name: gluetun-port-forwarding
        emptyDir:
      - name: transmission-config
        persistentVolumeClaim:
          claimName: transmission-config
      - name: downloads
        persistentVolumeClaim:
          claimName: downloads
      initContainers:
      - name: create-dirs
        image: busybox
        volumeMounts:
        - name: downloads
          subPath: transmission
          mountPath: /downloads
        command: ["/bin/sh", "-c"]
        args:
          - |-
            mkdir -p /downloads/complete/radarr
            mkdir -p /downloads/complete/sonarr
            chown -R 1000:1000 /downloads/*
      {{- with .Values.vpnsidecar }}
      {{- . | toYaml | nindent 6 }}
      {{- end }}
      containers:
      - name: sync-forwarded-port
        image: lscr.io/linuxserver/transmission:4.0.6-r4-ls300
        env:
        - name: TR_AUTH
          value: "transmission:password"
        command: ["/bin/sh", "-c"]
        args:
        - |-
          set -e
          while true; do
            sleep 60;
            port=$(cat /gluetun-port-forwarding/port || echo 0)
            if [[ "$port" == 0 ]]; then
              continue
            fi
            transmission-remote --authenv --port $port
            echo "Updated with port: $port"
          done;
        volumeMounts:
        - name: gluetun-port-forwarding
          mountPath: /gluetun-port-forwarding
        resources:
          requests:
            cpu: "10m"
            memory: "10Mi"
          limits:
            cpu: "100m"
            memory: "10Mi"
      - name: transmission
        image: lscr.io/linuxserver/transmission:4.0.6-r4-ls300
        env:
        - name: TZ
          value: Europe/Amsterdam
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        volumeMounts:
        - name: transmission-config
          mountPath: /config
        - name: downloads
          subPath: transmission
          mountPath: /downloads
        ports:
        - name: http
          containerPort: 9091
        resources:
          # TODO: check resource usage when under heavy load
          requests:
            cpu: "100m"
            memory: "100Mi"
          limits:
            cpu: "800m"
            memory: "200Mi"
        startupProbe:
          httpGet:
            path: /
            port: http
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /
            port: http
        livenessProbe:
          httpGet:
            path: /
            port: http
---
apiVersion: v1
kind: Service
metadata:
  name: transmission
spec:
  selector:
    app: transmission
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9091
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: transmission
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.media.cambridge.me/oauth2/start"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - "transmission.media.cambridge.me"
    secretName: transmission-media-cambridge-me-tls
  ingressClassName: nginx
  rules:
  - host: transmission.media.cambridge.me
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: transmission
            port:
              number: 80
